// PokerGame.java
// Author: Xiaoxiao Ma, in Uni Melb,2014/9/18
// Main Activity for the Flag Quiz Game App

package com.unimelb.npd.games.cardgame;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import org.apache.http.util.EncodingUtils;

import com.unimelb.npd.games.R;
import com.unimelb.npd.games.SendResultThread;
import com.unimelb.npd.server.vo.Game;
import com.unimelb.npd.server.vo.Patient;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

@SuppressLint("NewApi")
public class CardGame extends Activity {
	// String used when logging error messages
	private static final String TAG = "Card Game Activity";

	private List<String> fileNameList; // flag file names
	private List<String> quizPokeList; // names of countries in quiz
	private Map<String, Boolean> regionsMap; // which regions are enabled
	private String correctAnswer; // correct country for the current flag
	private int totalGuesses; // number of guesses made
	private int correctGuesses; // number of correct guesses
	private int level;
	private int sublevel;
	private long delay;
	private boolean guessResult;
	private int guessRows; // number of rows displaying choices
	private int buttonRow;
	private int randomcolumn;
	private int randomRow;
	private int life;
	private Random random; // random number generator
	private Handler handler; // used to delay loading next flag
	private Animation shakeAnimation; // animation for incorrect guess

	private TextView answerTextView; // displays Correct! or Incorrect!
	private TextView questionNumberTextView; // shows current question #
	private ImageView flagImageView; // displays a flag
	private TableLayout buttonTableLayout; // table of answer Buttons
	private ImageButton[][] pokerImgSelect;
	private String region;
	private String gameSettings;
	private String nextImageName;
	private boolean flag;
	
	public Patient patient;
	public int pid;
	public String patient_name;
	
	SendResultThread sendResultThread;

	// called when the activity is first created
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState); // call the superclass's method
		setContentView(R.layout.pokergamemain); // inflate the GUI

		fileNameList = new ArrayList<String>(); // list of image file names
		quizPokeList = new ArrayList<String>(); // flags in this quiz
		regionsMap = new HashMap<String, Boolean>(); // HashMap of regions
		guessRows = 1; // default to one row of choices
		level = 1;
		random = new Random(); // initialize the random number generator
		handler = new Handler(); // used to perform delayed operations
		patient = new Patient();
		Intent intent = this.getIntent();
		Bundle bundle = intent.getExtras();

		if (bundle != null && bundle.containsKey("patient")) {
			patient = (Patient) bundle.getSerializable("patient");
			pid = patient.getPid();
			patient_name = patient.getPatient_name();
		}
		

		// load the shake animation that's used for incorrect answers
		shakeAnimation = AnimationUtils.loadAnimation(this,
				R.anim.incorrect_shake);
		shakeAnimation.setRepeatCount(3); // animation repeats 3 times

		// get array of world regions from strings.xml
		String[] regionNames = getResources().getStringArray(
				R.array.regionsList);

		// by default, countries are chosen from all regions
		for (String region : regionNames)
			regionsMap.put(region, true);

		// get references to GUI components
		questionNumberTextView = (TextView) findViewById(R.id.questionNumberTextView);
		flagImageView = (ImageView) findViewById(R.id.flagImageView);
		buttonTableLayout = (TableLayout) findViewById(R.id.buttonTableLayout);
		answerTextView = (TextView) findViewById(R.id.answerTextView);

		// set questionNumberTextView's text
		questionNumberTextView.setText(getResources().getString(
				R.string.question)
				+ " 1 " + getResources().getString(R.string.of) + " 10");

		newGame(1, 1); // start a new quiz
	} // end method onCreate

	// set up and start the next quiz
	private void newGame(int plevel, int psublevel) {

		AssetManager assets = getAssets(); // get the app's AssetManager
		fileNameList.clear(); // empty the list
		flag = false;

		try {
			Set<String> regions = regionsMap.keySet(); // get Set of regions

			// loop through each region
			for (String region : regions) {
				if (regionsMap.get(region)) // if region is enabled
				{
					// get a list of all flag image files in this region
					String[] paths = assets.list(region);

					for (String path : paths)
						fileNameList.add(path.replace(".JPG", ""));
				}
			}
		} catch (IOException e) {
			Log.e(TAG, "Error loading image file names", e);
		}
		
		life = plevel;
		level = plevel;
		sublevel = psublevel;
		correctGuesses = 0; // reset the number of correct answers made
		totalGuesses = 0; // reset the total number of guesses the user made
		quizPokeList.clear(); // clear prior list of quiz countries
		if (level > 3)
			level = 3;

		String gamelevel = "PokerLevel/level" + Integer.toString(level) + "-"
				+ Integer.toString(sublevel);
		Log.d("file:", gamelevel);
		gameSettings = readGameSettings(gamelevel);
		Log.d("settings", gameSettings);

		String[] settings = gameSettings.split(",");
		buttonRow = Integer.parseInt(settings[0]);
		delay = Integer.parseInt(settings[1]);

		// add 10 random file names to the quizCountriesList
		int flagCounter = 1;
		int numberOfFlags = fileNameList.size(); // get number of flags

		while (flagCounter <= 10) {
			int randomIndex = random.nextInt(numberOfFlags); // random index

			// get the random file name
			String fileName = fileNameList.get(randomIndex);

			// if the region is enabled and it hasn't already been chosen
			if (!quizPokeList.contains(fileName)) {
				quizPokeList.add(fileName); // add the file to the list
				++flagCounter;
			}
		}

		loadNextFlag(sublevel); // start the quiz by loading the first flag
	}

	// after the user guesses a correct flag, load the next flag
	private void loadNextFlag(int psublevel) {

		String gamelevel = "PokerLevel/level" + Integer.toString(level) + "-"
				+ Integer.toString(sublevel);
		Log.d("file:", gamelevel);
		gameSettings = readGameSettings(gamelevel);
		Log.d("settings", gameSettings);

		String[] settings = gameSettings.split(",");
		buttonRow = Integer.parseInt(settings[0]);
		delay = Integer.parseInt(settings[1]);

		// get file name of the next flag and remove it from the list
		nextImageName = quizPokeList.remove(0);
		correctAnswer = nextImageName; // update the correct answer

		answerTextView.setText(""); // clear answerTextView

		// display the number of the current question in the quiz
		questionNumberTextView.setText(getResources().getString(
				R.string.question)
				+ " "
				+ (correctGuesses + 1)
				+ " "
				+ getResources().getString(R.string.of) + " 9 of level " +Integer.toString(level));

		// extract the region from the next image's name
		region = nextImageName.substring(0, nextImageName.indexOf('-'));
		Log.d("region:", region);

		// use AssetManager to load next image from assets folder
		AssetManager assets = getAssets();
		InputStream stream;

		try {
			// get an InputStream to the asset representing the next flag
			stream = assets.open(region + "/" + nextImageName + ".JPG");

			// load the asset as a Drawable and display on the flagImageView
			Drawable flag = Drawable.createFromStream(stream, nextImageName);
			flagImageView.setImageDrawable(flag);
		} catch (IOException e) {
			Log.e(TAG, "Error loading " + nextImageName, e);
		}

		// clear prior answer Buttons from TableRows
		for (int row = 0; row < buttonTableLayout.getChildCount(); ++row)
			((TableRow) buttonTableLayout.getChildAt(row)).removeAllViews();

		Collections.shuffle(fileNameList); // shuffle file names

		// put the correct answer at the end of fileNameList
		int correct = fileNameList.indexOf(correctAnswer);
		fileNameList.add(fileNameList.remove(correct));

		// get a reference to the LayoutInflater service
		LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);

		pokerImgSelect = new ImageButton[buttonRow][3];
		for (int i = 0; i < buttonRow; i++) {
			TableRow imageTableRow = getTableRow(i); // the i'th button row;

			for (int column = 0; column < 3; column++) {
				String fileName = fileNameList.get((i * 3) + column);
				pokerImgSelect[i][column] = (ImageButton) inflater.inflate(
						R.layout.image_select, null);
				pokerImgSelect[i][column]
						.setOnClickListener(guessButtonListener);
				imageTableRow.addView(pokerImgSelect[i][column]);

				InputStream pokeStream;
				try {
					// get an InputStream to the asset representing the next
					// flag
					pokeStream = assets.open(region + "/" + fileName + ".JPG");

					// load the asset as a Drawable and display on the
					// flagImageView
					Drawable flag = Drawable.createFromStream(pokeStream,
							fileName);
					pokerImgSelect[i][column].setImageDrawable(flag);
					pokerImgSelect[i][column].setBackground(null);
				} catch (IOException e) {
					Log.e(TAG, "Error loading " + nextImageName, e);
				}
			}
		}

		randomcolumn = random.nextInt(3);
		randomRow = random.nextInt(buttonRow);
		Drawable correctFlag = null;
		try {
			// get an InputStream to the asset representing the next flag
			stream = assets.open(region + "/" + nextImageName + ".JPG");
			Log.d("file:", nextImageName);

			// load the asset as a Drawable and display on the flagImageView
			correctFlag = Drawable.createFromStream(stream, nextImageName);
			pokerImgSelect[randomRow][randomcolumn]
					.setImageDrawable(correctFlag);
			pokerImgSelect[randomRow][randomcolumn].setBackground(null);
			pokerImgSelect[randomRow][randomcolumn]
					.setOnClickListener(correctguessButtonListener);
		} catch (IOException e) {
			Log.e(TAG, "Error loading " + nextImageName, e);
		}

		disableButtons();

		handler.postDelayed(new Runnable() {
			@Override
			public void run() {
				InputStream flagStream2;

				Drawable questionFlag = null;
				for (int row = 0; row < buttonRow; row++) {

					for (int column1 = 0; column1 < 3; column1++) {
						try {
							AssetManager assets1 = getAssets();
							flagStream2 = assets1.open("Question.png");

							questionFlag = Drawable.createFromStream(
									flagStream2, "Question");

							pokerImgSelect[row][column1]
									.setImageDrawable(questionFlag);
							pokerImgSelect[row][column1].setBackground(null);
							pokerImgSelect[row][column1].setEnabled(true);

						} catch (IOException e) {
							Log.e(TAG, "Error loading Quesiton.png", e);
						}
					}
				}
			}
		}, delay);
	}

	// returns the specified TableRow
	private TableRow getTableRow(int row) {
		return (TableRow) buttonTableLayout.getChildAt(row);
	}

	// parses the country flag file name and returns the country name
	private String getCountryName(String name) {
		return name.substring(name.indexOf('-') + 1).replace('_', ' ');
	}

	// called when the user selects an answer
	private void submitGuess(boolean guessResult) {
		String answer = getCountryName(correctAnswer);
		++totalGuesses; // increment the number of guesses the user has made

		// if the guess is correct
		if (guessResult) {
			++correctGuesses; // increment the number of correct answers

			// display "Correct!" in green text
			answerTextView.setText("Correct !");
			answerTextView.setTextColor(getResources().getColor(
					R.color.correct_answer));

			disableButtons(); // disable all answer Buttons

			// if the user has correctly identified 10 flags
			if (correctGuesses == 9) {
				level++;
				// create a new AlertDialog Builder
				AlertDialog.Builder builder = new AlertDialog.Builder(this);

				builder.setTitle(R.string.reset_quiz); // title bar string

				// set the AlertDialog's message to display game results
				builder.setMessage(String.format("%d %s, %.02f%% %s",
						totalGuesses, getResources()
								.getString(R.string.guesses),
						(900 / (double) totalGuesses), getResources()
								.getString(R.string.correct)));

				builder.setCancelable(false);

				// add "Reset Quiz" Button
				builder.setPositiveButton(R.string.next_level,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								newGame(level, 1);
							}
						});

				// create AlertDialog from the Builder
				AlertDialog resetDialog = builder.create();
				resetDialog.show(); // display the Dialog
			} else // answer is correct but quiz is not over
			{
				if (correctGuesses % 3 == 0) {
					sublevel++;
				}
				// load the next flag after a 1-second delay
				handler.postDelayed(new Runnable() {
					@Override
					public void run() {
						loadNextFlag(sublevel);
					}
				}, 10); // 1000 milliseconds for 1-second delay
			}
		} else // guess was incorrect
		{
			// play the animation
			flagImageView.startAnimation(shakeAnimation);
			
			// decrease the life
			life--;
			// display "Incorrect!" in red
			answerTextView.setText(R.string.incorrect_answer);
			answerTextView.setTextColor(getResources().getColor(
					R.color.incorrect_answer));
		}
		
		// the life is over.
		if(life==0){
			AlertDialog.Builder builder = new AlertDialog.Builder(this);

			builder.setTitle(R.string.game_over); // title bar string

			// set the AlertDialog's message to display game results
			builder.setMessage(String.format("%s %d-%d",
					"Failed at level",level,sublevel));

			builder.setCancelable(false);

			// add "Reset Quiz" Button
			builder.setPositiveButton(R.string.reset_quiz,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int id) {
							flag = true;
							sendResult();
							newGame(1, 1);
						}
					});

			// create AlertDialog from the Builder
			AlertDialog resetDialog = builder.create();
			resetDialog.show(); // display the Dialog
		}
		
	}
	
	private void sendResult(){
		if(flag){
			Game game = new Game();
			game.setGid(5);
			game.setLevel(level+sublevel);
			game.setPid(this.pid);
			game.setTime(0);
			game.setScore(0);
			game.setPercent(0);
			game.setAccuracy(0);
			sendResultThread = new SendResultThread(game);
			sendResultThread.start();
			flag = false;
		}
	}

	// utility method that disables all answer Buttons
	private void disableButtons() {
		for (int row = 0; row < buttonTableLayout.getChildCount(); ++row) {
			TableRow tableRow = (TableRow) buttonTableLayout.getChildAt(row);
			for (int i = 0; i < tableRow.getChildCount(); ++i)
				tableRow.getChildAt(i).setEnabled(false);
		}
	}

	// create constants for each menu id
	private final int CHOICES_MENU_ID = Menu.FIRST;
	private final int REGIONS_MENU_ID = Menu.FIRST + 1;

	// called when the user accesses the options menu
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);

		// add two options to the menu - "Choices" and "Regions"
		menu.add(Menu.NONE, CHOICES_MENU_ID, Menu.NONE, R.string.choices);
		menu.add(Menu.NONE, REGIONS_MENU_ID, Menu.NONE, R.string.regions);

		return true; // display the menu
	}

	// called when the user selects an option from the menu
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// switch the menu id of the user-selected option
		switch (item.getItemId()) {
		case CHOICES_MENU_ID:
			// create a list of the possible numbers of answer choices
			final String[] possibleChoices = getResources().getStringArray(
					R.array.guessesList);

			// create a new AlertDialog Builder and set its title
			AlertDialog.Builder choicesBuilder = new AlertDialog.Builder(this);
			choicesBuilder.setTitle(R.string.choices);

			// add possibleChoices's items to the Dialog and set the
			// behavior when one of the items is clicked
			choicesBuilder.setItems(R.array.guessesList,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int item) {
							// update guessRows to match the user's choice
							guessRows = Integer.parseInt(possibleChoices[item]
									.toString()) / 3;
							newGame(1, 1); // reset the quiz
						}
					});
			// create an AlertDialog from the Builder
			AlertDialog choicesDialog = choicesBuilder.create();
			choicesDialog.show(); // show the Dialog
			return true;

		case REGIONS_MENU_ID:
			// get array of world regions
			final String[] regionNames = regionsMap.keySet().toArray(
					new String[regionsMap.size()]);

			// boolean array representing whether each region is enabled
			boolean[] regionsEnabled = new boolean[regionsMap.size()];
			for (int i = 0; i < regionsEnabled.length; ++i)
				regionsEnabled[i] = regionsMap.get(regionNames[i]);

			// create an AlertDialog Builder and set the dialog's title
			AlertDialog.Builder regionsBuilder = new AlertDialog.Builder(this);
			regionsBuilder.setTitle(R.string.regions);

			// replace _ with space in region names for display purposes
			String[] displayNames = new String[regionNames.length];
			for (int i = 0; i < regionNames.length; ++i)
				displayNames[i] = regionNames[i].replace('_', ' ');

			// add displayNames to the Dialog and set the behavior
			// when one of the items is clicked
			regionsBuilder.setMultiChoiceItems(displayNames, regionsEnabled,
					new DialogInterface.OnMultiChoiceClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which,
								boolean isChecked) {
							// include or exclude the clicked region
							// depending on whether or not it's checked
							regionsMap.put(regionNames[which].toString(),
									isChecked);
						}
					});

			// resets quiz when user presses the "Reset Quiz" Button
			regionsBuilder.setPositiveButton(R.string.reset_quiz,
					new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int button) {
							newGame(1, 1); // reset the quiz
						}
					});

			// create a dialog from the Builder
			AlertDialog regionsDialog = regionsBuilder.create();
			regionsDialog.show(); // display the Dialog
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	// called when a guess Button is touched
	private OnClickListener guessButtonListener = new OnClickListener() {
		@Override
		public void onClick(View v) {
			guessResult = false;
			submitGuess(guessResult); // pass selected Button to submitGuess
		}
	};
	private OnClickListener correctguessButtonListener = new OnClickListener() {
		@Override
		public void onClick(View v) {
			guessResult = true;
			InputStream stream;
			try {
				// get an InputStream to the asset representing the next flag
				AssetManager assets = getAssets();
				stream = assets.open(region + "/" + nextImageName + ".JPG");
				// load the asset as a Drawable and display on the flagImageView
				Drawable flag = Drawable.createFromStream(stream, nextImageName);
				pokerImgSelect[randomRow][randomcolumn].setImageDrawable(flag);
			} catch (IOException e) {
				Log.e(TAG, "Error loading " + nextImageName, e);
			}
			submitGuess(guessResult); // pass selected Button to submitGuess
		}
	};

	public void writeFiles(String name, String file) {
		// Log.d("log", "writeFiles");
		try {
			FileOutputStream fos = openFileOutput(name, Context.MODE_PRIVATE);
			fos.write(file.getBytes());
			Log.d(name, "created");
			// Log.d("log", new String(file.getBytes()));
			fos.close();

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public String readGameSettings(String filename) {
		String gameSetting = null;
		try {
			InputStream in = getResources().getAssets().open(filename);
			int length = in.available();
			byte[] buffer = new byte[length];
			in.read(buffer);
			gameSetting = EncodingUtils.getString(buffer, "UTF-8");

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return gameSetting;
	}
}
