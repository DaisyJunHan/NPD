package com.unimelb.npd.games.pipe;

import java.util.HashMap;

import com.unimelb.npd.games.GameOverView;
import com.unimelb.npd.games.MainActivity;
import com.unimelb.npd.games.MenuView;
import com.unimelb.npd.games.R;
import com.unimelb.npd.games.WelcomeView;
import com.unimelb.npd.server.vo.Patient;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Rect;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.Window;
import android.view.WindowManager;
import static com.unimelb.npd.games.pipe.ViewConstant.*;

enum WhichView {
	WELCOME_VIEW, GAME_VIEW, GAMEOVER_VIEW, MENU_VIEW
};

public class PipeGameActivity extends Activity {

	public Patient patient;
	public int pid;
	public String patient_name;
	public int age;
	public int pipe_level;
	public static final int STATUS_PLAY = 0; // 游戏进行中
	public static final int STATUS_PAUSE = 1; // 游戏暂停
	public static final int STATUS_WIN = 2; // 通过一关
	public static final int STATUS_LOSE = 3; // 丢掉一条命
	public static final int STATUS_OVER = 4; // 送完命了，游戏结束
	public static final int STATUS_PASS = 5; // 通全关
	// public static final int MAX_LIFE = 5; //最大生命数
	public static final int MAX_LEVEL = 3; // 最大关卡数
	int level = 1;
	WhichView wv;
	WelcomeView welcomeView;
	PipeGameView gameView;
	GameOverView gameoverView;
	MenuView menuView;
	SoundPool soundPool;
	HashMap<Integer, Integer> soundPoolMap;
	int screenWidth;
	int screenHeight;
	Rect rectGameMsgBox;
	public Handler myHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case 0:
				wv = WhichView.GAMEOVER_VIEW;
				gotoGameOverView();
				break;
			case 1:
				wv = WhichView.MENU_VIEW;
				gotoMenuView();
				break;
			case 2:
				wv = WhichView.GAME_VIEW;
				gotoGameView();
				break;
			default:
				if (msg.what > 10) {
					gameView.resumeGame();
					gameView.initMap(msg.what - 10);
				}
				break;
			}
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		patient = new Patient();
		Intent intent = this.getIntent();
		Bundle bundle = intent.getExtras();

		if (bundle != null && bundle.containsKey("patient")) {
			patient = (Patient) bundle.getSerializable("patient");
			pid = patient.getPid();
			patient_name = patient.getPatient_name();
			age = patient.getAge();
			pipe_level = patient.getPipe_level();
			this.level = pipe_level;
		}

		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
		initPm();
		initRect();
		initSound();

		gotoGameView();
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		if (event.getAction() == MotionEvent.ACTION_UP) {
			int x = (int) event.getX();
			int y = (int) event.getY();
			if (wv == WhichView.GAME_VIEW) {
				if (gameView.status == STATUS_WIN) {
					if (rectGameMsgBox.contains(x, y)) {
						gameView.initMap(level);
						gameView.resumeGame();
					}
				}
			}
		}
		return true;
	}

	public void gotoGameView() {
		gameView = new PipeGameView(PipeGameActivity.this);
		setContentView(gameView);
		wv = WhichView.GAME_VIEW;

	}

	private void gotoMenuView() {
		if (menuView == null) {
			menuView = new MenuView(this);
		}
		setContentView(menuView);
		wv = WhichView.MENU_VIEW;
	}

	public void gotoGameOverView() {
		if (gameoverView == null) {
			gameoverView = new GameOverView(this);
		}
		setContentView(gameoverView);
		wv = WhichView.GAMEOVER_VIEW;
	}

	public void initRect() {
		rectGameMsgBox = new Rect(140, 351, 367, 487);
	}

	@SuppressLint("UseSparseArrays")
	public void initSound() {
		soundPool = new SoundPool(4, AudioManager.STREAM_MUSIC, 100);
		soundPoolMap = new HashMap<Integer, Integer>();
		soundPoolMap.put(1, soundPool.load(this, R.raw.bi, 1));
		soundPoolMap.put(2, soundPool.load(this, R.raw.next, 1));

	}

	public void playSound(int sound, int loop) {
		if (!isnoPlaySound) {
			return;
		}
		AudioManager mgr = (AudioManager) this
				.getSystemService(Context.AUDIO_SERVICE);
		float streamVolumeCurrent = mgr
				.getStreamVolume(AudioManager.STREAM_MUSIC);
		float streamVolumeMax = mgr
				.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
		float volume = streamVolumeCurrent / streamVolumeMax;
		soundPool.play(soundPoolMap.get(sound), volume, volume, 1, loop, 1f);
	}

	public void initPm() {
		DisplayMetrics dm = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(dm);
		screenHeight = (int) (height = dm.heightPixels);
		screenWidth = (int) (width = dm.widthPixels);
		if (screenHeight > screenWidth) {
			height = screenHeight;
			width = screenWidth;
		} else {
			height = screenWidth;
			width = screenHeight;
		}
		float zoomx = width / 480;
		float zoomy = height / 800;
		if (zoomx > zoomy) {
			xZoom = yZoom = zoomy;

		} else {
			xZoom = yZoom = zoomx;
		}
		sXtart = (width - 480 * xZoom) / 2;
		sYtart = (height - 800 * yZoom) / 2;
		initChessViewFinal();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent e) {
		if (keyCode != 4) {
			return true;
		}
		if (wv == WhichView.WELCOME_VIEW) {
			return true;
		}

		if (wv == WhichView.GAME_VIEW) {
			gameView.threadFlag = false;
			System.exit(0);
			return true;
		}
		System.exit(0);
		return true;
	}

	public void sendMessage(int what) {
		Message msg1 = myHandler.obtainMessage(what);
		myHandler.sendMessage(msg1);
	}

}
